import styles from '@/styles/ShoppingCart.module.scss';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import type { ResponseAPIGetShoppingCartInfo, ShoppingCartProductInfo } from '@/mockAPI/types';
import ShoppingCartProductCard from '@/components/shoppingCartProductCard/ShoppingCartProductCard';

const getFetchData = (async (url: string) => {
    const res = await fetch(url);

    return res.json();
}) as <T>(url: string) => Promise<T>;

export default function ShoppingCart() {
    const [products, setProducts] = useState<ShoppingCartProductInfo[]>([]);
    const [totalMoney, setTotalMoney] = useState(0);
    const [totalCount, setTotalCount] = useState(0);

    useEffect(() => {
        (async function() {
            const data = await getFetchData<ResponseAPIGetShoppingCartInfo>('/api/getShoppingCart');
            
    
            console.log(data);
            setProducts(data);
        })();
    }, []);

    useEffect(() => {
        handleCalculateBillingInfo();
    }, [products]);

    const handleCalculateBillingInfo = () => {
        let newTotalMoney = 0;
        let newTotalCount = 0;

        products.forEach((product) => {
            newTotalCount += product.count;
            newTotalMoney += product.count * Number(product.money) * 100;
        });

        setTotalMoney(newTotalMoney / 100);
        setTotalCount(newTotalCount);
    }

    const handleDeleteProduct = async (productId: string) => {
        const data = await getFetchData<ResponseAPIGetShoppingCartInfo>(`/api/deleteProduct?productId=${productId}`);

        setProducts(data);
    }

    const handleChangedProductCount = async (productId: string, count: number) => {
        const data = await getFetchData<ResponseAPIGetShoppingCartInfo>(`/api/updateProductCount?productId=${productId}&count=${count}`);

        setProducts(data);
    }

    const renderProducts = () => {
        if (products.length === 0) {
            return null;
        }

        return products.map((product) => {
            return (
                <ShoppingCartProductCard
                    key={`product-${product.productId}`}
                    product={product}
                    onDeletedProduct={handleDeleteProduct}
                    onChangedCount={handleChangedProductCount}
                />
            );
        });
    }

    return (
        <>
            <Head>
                <title>Shopping - Shopping Cart</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.shoppingCart}>
                <div className='content'>
                    <div className='product-list'>
                        {renderProducts()}
                    </div>
                    <div className='billing-info'>
                        <p className='billing-info-item'>商品数量：<span>x{totalCount}</span></p>
                        <p className='billing-info-item'>总价：<span>${totalMoney}</span></p>
                        <button className='buy__button'>下单</button>
                    </div>
                </div>
            </main>
        </>
    )
}